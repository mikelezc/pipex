OK tests

1.	Este comando toma el contenido de infile.txt, 
	"grep a1" filtra las líneas que contienen "a1", 
	"wc -w"  cuenta el número de palabras en la salida filtrada. 
	Escribe el conteo de palabras en outfile.txt.

	./pipex infile.txt "grep a1" "wc -w" outfile.txt
	< infile.txt grep a1 | wc -w


2.	Este comando toma el contenido de infile.txt, 
	"ls -l" lista archivos en formato largo, 
	"wc -l" cuenta el número de líneas en la salida. 
	Escribe el conteo de líneas en outfile.txt.

	./pipex infile.txt "ls -l" "wc -l" outfile.txt
	< infile.txt ls -l | wc -l 


3.	Este comando toma el contenido de infile.txt, 
	"ls -l" lista archivos en formato largo, 
	"cat" "concatenate" concatena y muestra el contenido de archivos, pero en este caso,
	crea, concatena y mouestra contenido de archivos.
	Se escribe en outfile.txt

	./pipex infile.txt "ls -l" "cat" outfile.txt
	< infile.txt ls -l | cat


4.	Este comando toma el contenido de infile.txt, 
	"grep Hello" para filtrar líneas que contienen "Hello", 
	pasa la salida a /bin/cat (lo mismo, que poner cat, 
	solo que en este caso especificamos en que ruta está el ejecutable cat,
	con la finalidad de testear el programa)
	El resultado se escribe en outfile.txt.

	./pipex infile.txt "grep Hello" "/bin/cat" outfile.txt
	< infile.txt grep Hello | /bin/cat


5.	Este comando toma el contenido de infile.txt, 
	lo pasa al comando cat, luego pasa la salida al comando hostname. 
	El resultado se escribe en outfile.txt.

	./pipex infile.txt "cat" "hostname" "outfile.txt"
	< infile.txt cat | hostname


6.	Este comando toma el contenido de infile.txt, 
	"grep Now" para filtrar líneas que contienen "Now", 
	"head -2" toma las dos primeras líneas de la salida filtrada. 
	El resultado se escribe en outfile.txt.
	
	./pipex infile.txt "grep Now" "head -2" "outfile.txt"
	< infile.txt grep Now | head -2


7.	Este comando toma el contenido de infile.txt, 
	"grep Now" para filtrar líneas que contienen "Now", 
	pasa la salida al comando cat. 
	El resultado se escribe en outfile.txt.

	./pipex infile.txt "grep Now" "cat" "outfile.txt"
	< infile.txt grep Now | cat


8.	Este comando toma el contenido del archivo infile.txt, 
	"grep Now" filtra las líneas que contienen "Now", 
	pasa esa salida a cat,
	"$which cat" es equivalente a simplemente usar cat.
	La razón de usar $(which cat) es para especificar explícitamente,
	la ruta completa del ejecutable cat en lugar de depender
	de la configuración del entorno del sistema en caso de necesitarlo.
	El resultado se escribe en outfile.txt.

	./pipex infile.txt "grep Now" "$which cat" "outfile.txt"
	< infile.txt grep Now | $(which cat)


BONUS

1. Múltiples pipes puestos en serie.

	Desglose de la línea de comando:

		cat archivo.txt: Lee el contenido del archivo archivo.txt.

		grep "patrón": Filtra las líneas que contienen el texto entre comillas.

		sed 's/old/new/g': Reemplaza todas las ocurrencias de la cadena "old" por "new" en las líneas recibidas.

		sort: Ordena las líneas recibidas alfabéticamente.

		uniq: Filtra líneas duplicadas consecutivas y las envía a la salida estándar.

		> resultado.txt: Redirige la salida estándar al archivo resultado.txt.

./pipex_bonus infile_bonus.txt "grep "patrón" " "sed s/old/new/g" "sort" "uniq" "outfile.txt" 
< infile_bonus.txt | grep "patrón" | sed 's/old/new/g' | sort | uniq 

2. Ejemplo de la utilización de here_doc

"CMD << STOP_VALUE | CMD1 >> archivo1" varias veces


$> ./pipex_bonus "here_doc" EOF cat grep "ejemplo" outfile.txt
Este es un ejemplo de here document.
Puedes incluir múltiples líneas de texto aquí.
EOF


$> cat << EOF | grep "ejemplo" >> outfile.txt
Este es un ejemplo de here document.
Puedes incluir múltiples líneas de texto aquí.
EOF

Este comando de bash ejecuta lo siguiente:

- cat << END: Inicia "here document", (Incluir texto en un script de shell directamente en línea).

- END es el delimitador que marca el final del here document.

- | grep "ejemplo": Envía la salida del here document al comando grep, que filtrará las líneas que contienen la palabra "ejemplo".

>> outfile.txt: Esto redirige la salida del comando grep (que contiene las líneas que contienen "ejemplo") al archivo outfile.txt, agregando el resultado al final del archivo si ya existe.

Entonces, en resumen, este comando toma el texto entre << END y END, filtra las líneas que contienen la palabra "ejemplo" y luego agrega esas líneas al final del archivo outfile.txt.